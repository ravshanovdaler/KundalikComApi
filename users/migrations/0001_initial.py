# Generated by Django 4.2.6 on 2023-10-25 12:12

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('schools', '0004_alter_classesmodel_grade_alter_classesmodel_school'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('superadmin', 'Super_admin'), ('school admin', 'Schooladmin'), ('teacher', 'Teacher')], max_length=256)),
                ('date_of_birth', models.DateField()),
                ('phone_number', models.BigIntegerField()),
                ('adress', models.CharField(max_length=200)),
                ('dads_first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('moms_first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('dads_last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('moms_last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('parents_phone_number', models.BigIntegerField(blank=True, null=True)),
                ('subject', models.CharField(blank=True, choices=[('Maths', 'Maths'), ('Physics', 'Physics'), ('Chemistry', 'Chemistry'), ('Biology', 'Biology'), ('Art', 'Art'), ('English Language', 'English Language'), ('Russian Language', 'Russian Language'), ('Mother Language', 'Mother Language'), ('Music', 'Music'), ('Computer Science', 'Computer Science')], max_length=50, null=True)),
                ('class_leader', models.ForeignKey(blank=True, limit_choices_to={'school': models.F('school')}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_leader', to='schools.classesmodel')),
                ('classes', models.ManyToManyField(blank=True, limit_choices_to={'school': models.F('school')}, related_query_name='teacher', to='schools.classesmodel')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_admin', to='schools.schoolsmodel')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
